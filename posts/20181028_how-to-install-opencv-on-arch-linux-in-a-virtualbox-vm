<ul>
<li><a href="#heading-intro">Introduction</a></li>
<li><a href="#heading-prereqs">Prerequisites</a></li>
<li><a href="#heading-from-repo">Install OpenCV from the Arch repositories</a></li>
<li><a href="#heading-from-source">Install OpenCV by building from source</a>
  <ul>
    <li><a href="#aside-vm-details">Virtual machine–specific details</a></li>
    <li><a href="#aside-pch-error">Potential error: <span class="font-courier-new">can't write PCH file</a></li>
    <li><a href="#aside-make-hangs">Potential issue: <span class="font-courier-new">make</span> hangs at XX%</a></li>
  </ul></li>
<li><a href="#heading-check-cpp">Check the installation (C++)</a>
  <ul>
    <li><a href="#aside-no-header">Potential error: <span class="font-courier-new">No such file or directory</span></a></li>
  </ul></li>
<li><a href="#heading-link-python">Link the OpenCV Python bindings</a></li>
</ul>

<h1 id="heading-intro">Introduction</h1>
If you're looking to install OpenCV on Arch, you have two options. The first is to just use the <a href="https://www.archlinux.org/packages/extra/x86_64/opencv/" rel="noopener" target="_blank">pre-compiled package</a> available in the official Arch repositories.

The other option is to compile OpenCV from source, which gives you more control over what gets installed. For starters, if you install from the Arch repositories, you're locked in to the version of OpenCV for which the package was compiled, which, at the time of this writing, is 3.4.3—the current stable release. The 4.0.0 pre-release is not yet available through the repositories. This probably won't be an issue for most people, but could be if you need features only available in the pre-release.

Furthermore, the pre-built package seems like it contains all available modules, including extra modules from the <code>opencv_contrib</code> Github repository. Again, this isn't a problem in and of itself, but may be if you don't want the extra modules or are working on a system with limited storage space.

Additionally, if you plan to use OpenCV-Python, the Python hooks in the pre-built package have been compiled against Python 2.7 and Python 3.7. Once again, most likely not an issue, but if you're using a different version of Python on your machine, it may present problems. The pre-built package has also been compiled against a specific version of numpy—likely the latest at the time of its release—and if you're using a different version of numpy, there may also be compatibility issues.

Lastly, the title mentions installing on a copy of Arch that's running in a VM. While I did perform my install in a VM, the instructions are applicable for any installation of OpenCV on Arch, whether in a VM or not. There are a couple VM-specific pieces of information that have clearly been marked as such; you can ignore these if they're not applicable to you.

With that out of the way, let's dive in.

<h1 id="heading-prereqs">Prerequisites</h1>
You'll want to make sure you've installed <code>base-devel</code> (which is simply a group of development-related packages), <code>cmake</code>, and <code>ffmpeg</code> (or libav video codecs). You may also want to make sure you have image codec libraries, like <code>libjpeg-turbo</code> and <code>libtiff</code>. You can find a more thorough list of dependencies in the <a href="https://docs.opencv.org/master/d7/d9f/tutorial_linux_install.html" rel="noopener" target="_blank">OpenCV documentation</a>.

If you plan to work with Python, you should obviously have Python installed, as well as <code>python-pip</code>. Generally, with Python, you'll want to work in a virtual environment, so be sure you've also installed <code>virtualenv</code> through <code>pip</code>.

<pre><code class="language-bash">$ sudo pip install virtualenv</code></pre>

<strong>Generally, you should not install Python packages with <code>sudo</code>!</strong> Doing so installs them globally rather than within an isolated, controlled virtual environment. The only Python packages you should install globally should be those related to setting up and managing virtual environments. Personally, I like to supplement <code>virtualenv</code> with <code>virtualenvwrapper</code>:

<pre><code class="language-bash">$ sudo pip install virtualenv virtualenvwrapper</code></pre>

Like the examples shown in the <a href="https://virtualenvwrapper.readthedocs.io/en/latest/install.html" rel="noopener" target="_blank">virtualenvwrapper installation documentation</a>, I use <code>~/.virtualenvs</code> as the directory for my virtual environments, but you can use any directory you'd like.

For the remainder of this post, I'll use a Python virtual environment named <code>cv</code> but, again, you can name it anything. To create a new virtual environment with <code>virtualenvwrapper</code>, issue the following command:

<pre><code class="language-bash">$ mkvirtualenv cv</code></pre>

Ensure the virtual environment is activated, then install <code>numpy</code>.

<pre><code class="language-bash">$ workon cv
$ pip install numpy</code></pre>

<h1 id="heading-from-repo">Install OpenCV from the Arch repositories</h1>

The easiest way to install OpenCV on Arch is to simply use the <a href="https://www.archlinux.org/packages/extra/x86_64/opencv/" rel="noopener" target="_blank">pre-built package</a> from the official repositories.

<pre><code class="language-bash">$ sudo pacman -S opencv</code></pre>

Optionally, you can also install the OpenCV samples:

<pre><code class="language-bash">$ sudo pacman -S opencv opencv-samples</code></pre>

<h1 id="heading-from-source">Install OpenCV by building from source</h1>

First, make sure git is installed.

<pre><code class="language-bash">$ sudo pacman -S --needed git</code></pre>

Clone the main <code>opencv</code> repository and, if desired, the <code>opencv_contrib</code> repository, which contains extra modules, from Github. For simplicity, the instructions that follow will put these repositories in your home directory, but the location doesn't matter.

<pre><code class="language-bash">$ cd ~
$ git clone https://github.com/opencv/opencv.git
$ git clone https://github.come/opencv/opencv_contrib.git</code></pre>

The rest of the instructions for this step borrow from <a href="https://www.pyimagesearch.com/2018/05/28/ubuntu-18-04-how-to-install-opencv/" rel="noopener" target="_blank">Adrian Rosebrock's latest post</a> on installing OpenCV for Ubuntu 18.04.

Within the cloned <code>opencv</code> repository, make a directory named <code>build</code> and <code>cd</code> into that directory.

<pre><code class="language-bash">$ cd ~/opencv
$ mkdir build
$ cd build
</code></pre>

Next, ensure that your Python virtual environment is active, then run <code>cmake</code> with the following parameters:

<pre><code class="language-bash">$ cmake -D CMAKE_BUILD_TYPE=RELEASE \
    -D CMAKE_INSTALL_PREFIX=/usr/local \
    -D INSTALL_PYTHON_EXAMPLES=OFF \
    -D INSTALL_C_EXAMPLES=OFF \
    -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib/modules \
    -D PYTHON_EXECUTABLE=~/.virtualenvs/cv/bin/python \
    -D BUILD_EXAMPLES=ON \
    -D ENABLE_PRECOMPILED_HEADERS=ON ..
</code></pre>

You can choose whether to compile or not compile any of the examples—they're not necessary for the installation itself. If you've chosen not to install the <code>opencv_contrib</code> modules, omit that line above. To obtain the correct path to your Python executable, make sure you're in the correct virtual environment, then use the <code>which</code> command:

<pre><code class="language-bash">$ which python
/home/najam/.virtualenvs/cv/bin/python</code></pre>

After you've run this <code>cmake</code> command, examine the output, particularly the Python-related portions near the end. It should look something like this:

<img src="https://nrsyed.com/wp-content/uploads/2018/10/arch_cv_cmake.jpg" alt="OpenCV cmake output" max-width=80% height=auto class="aligncenter size-full wp-image-759" />

In particular, make sure that the lines for the Python interpreter and <code>numpy</code> point to the correct locations—they should correspond to the path for your virtual environment. If they're not correct, remove all files from the <code>build</code> folder:

<pre><code class="language-bash">$ rm -R ~/opencv/build/*</code></pre>

Be sure you've activated the correct virtual environment and that the <code>cmake</code> flags are correct. Examine the rest of the <code>cmake</code> output as well to make sure nothing else important is missing. Then, run the aforementioned <code>cmake</code> command again.

Once <code>cmake</code> is happy (and you're satisfied with its output), it's time to actually build the necessary files. In the <code>build</code> directory, simply run <code>make</code>. To speed up the build process, take advantage of all the cores your processor has with the <code>-j</code> flag.

<pre><code class="language-bash">$ make -j4</code></pre>

In this example, <code>-j4</code> instructs <code>make</code> to run up to four jobs in parallel (assuming your processor has at least four CPUs). Run <code>lscpu</code> to find out how many CPUs are available on your system:

<pre><code class="language-bash">$ lscpu | grep -i '^cpu(s)'
CPU(s):        4
</code></pre>

<div class="aside">
<h3 id="aside-vm-details">Virtual machine–specific details</h3>
If, like me, you're working with a copy of Arch in a virtual machine, you may have to make a couple adjustments. The instructions and screenshots below are for VirtualBox, since that's what I'm using.

To permit the VM to utilize your CPU's cores for the build process (i.e., for <code>make</code>&#8217;s <code>-j</code> flag), make the following changes in the VM's System settings:

1. On the Motherboard tab, check "Enable I/O APIC" under Extended Features.
<img src="https://nrsyed.com/wp-content/uploads/2018/10/arch_cv_vm_settings1.png" alt="VirtualBox motherboard settings" width="603" height="375" class="aligncenter size-full wp-image-763" />

2. On the Acceleration tab, make sure that "Enable VT-x/AMD-V" is selected under Hardware Virtualization.
<img src="https://nrsyed.com/wp-content/uploads/2018/10/arch_cv_vm_settings2.png" alt="VirtualBox system acceleration settings" width="603" height="375" class="aligncenter size-full wp-image-764" />

3. On the Processor tab, increase the number of CPUs to the desired number.
<img src="https://nrsyed.com/wp-content/uploads/2018/10/arch_cv_vm_settings3.png" alt="VirtualBox VM processor settings" width="603" height="375" class="aligncenter size-full wp-image-765" />

In the VM itself, check that the number of CPUs reflects your chosen settings by running <code>lscpu</code>, as mentioned previously.
</div>

<div class="aside">
<h3 id="aside-pch-error">Potential error: <span class="font-courier-new">can't write PCH file</span></h3>
In my case, the partition on which I was installing OpenCV apparently wasn't large enough to fit some of the header files created during the build process (which can be several GB larger than the library itself). Specifically, I received the following error:

<pre><code class="language-bash">fatal error: can't write PCH file: No space left on device
compilation terminated</code></pre>

<img src="https://nrsyed.com/wp-content/uploads/2018/10/arch_cv_pch_error.jpg" alt="OpenCV install PCH file error" max-width=90% height=auto class="aligncenter size-full wp-image-761" />

(Note that the output of my <code>make</code> command in the screenshot above is more verbose than normal because I ran it with the <code>-d</code> (debug) flag).

"PCH" refers to "precompiled headers." To address this error, I had to re-run <code>cmake</code> with <code>-D ENABLE_PRECOMPILED_HEADERS=OFF</code>. If you have to do this, remove all the files originally generated by <code>cmake</code> first.
</div>

<div class="aside">
<h3 id="aside-make-hangs">Potential issue: <span class="font-courier-new">make</span> hangs at XX%</h3>
This seems to be a relatively common problem, according to a Google search, in which <code>make</code> reaches [28%] or [37%] or [99%] or [100%] or some other percentage and hangs there indefinitely. Some individuals report having to wait up to 20 or 30 minutes at [99%] or [100%], so try being patient, first. However, if that doesn't help, there may be a few potential solutions.

In my case, I hadn't given my VM instance enough RAM. I found that increasing the amount of memory from 1GB to 2GB in the instance System settings Motherboard tab ("Base Memory") did the trick.

<img src="https://nrsyed.com/wp-content/uploads/2018/10/arch_cv_vm_settings1.png" alt="VirtualBox motherboard settings" width="603" height="375" class="aligncenter size-full wp-image-763" />

Other solutions include compiling with a single CPU via <code>make -j1</code> or increasing the amount of swap space. You can also run <code>make</code> with the <code>-d</code> option to print all debug information, which might help you zero in on the issue if the aforementioned solutions don't work.
</div>

Hopefully, at this point, you've been able to get OpenCV to compile successfully. The next step is to perform the actual install and update the linker with the following commands:

<pre><code class="language-bash">$ sudo make install
$ sudo ldconfig</code></pre>

<h1 id="heading-check-cpp">Check the installation (C++)</h1>

After completing the installation per the previous steps, fire up a text editor and write the following short C++ program (I'll call it <code>cv.cpp</code>):

<pre><code class="language-cpp">#include &lt;iostream&gt;
#include &lt;opencv2/core.hpp&gt;

int main() {
    std::cout << "OpenCV version: " << CV_VERSION << std::endl;
    return 0;
}</code></pre>

Then compile and run the program as follows.

<pre><code class="language-bash">$ g++ cv.cpp -o cv
$ ./cv
OpenCV version: 4.0.0-pre</code></pre>

<div class="aside">
<h3 id="aside-no-header">Potential error: <span class="font-courier-new">No such file or directory</span></h3>
When I first tried to compile the program above, I received the following error:
<pre><code class="language-bash">fatal error: opencv2/core.hpp: No such file or directory
#include &lt;opencv2/core.hpp&gt;
compilation terminated</code></pre>
<img src="https://nrsyed.com/wp-content/uploads/2018/10/arch_cv_header_error.png" alt="OpenCV header not found error" width="525" height="83" class="aligncenter size-full wp-image-770" />

To troubleshoot the issue, I ran <code>find</code> from the root directory:

<pre><code class="language-bash">$ cd /
$ sudo find . -name '*core.hpp'</code></pre>

Ignoring the results from my home directory (which were simply from the build, not the install), I saw that the header files had been installed to <code>/usr/local/include/opencv4/opencv2/</code> instead of <code>/usr/local/include/opencv2/</code>:

<img src="https://nrsyed.com/wp-content/uploads/2018/10/arch_cv_find.png" alt="OpenCV find headers" width="645" height="122" class="aligncenter size-full wp-image-771" />

I've used the procedure in this post to build and install OpenCV (including the 4.0.0 pre-release) from source in the past and haven't encountered this issue before. Thus, I have no idea whether it’s due to some peculiarity with my system and setup—with Arch or with VirtualBox—or whether I overlooked something during the build process. If you can shed some light on this phenomenon, please leave a comment or send me a message. Regardless, I was able to solve it by creating a symlink as follows:

<pre><code class="language-bash">$ sudo ln -s /usr/local/include/opencv4/opencv2/ /usr/local/include/opencv2</code></pre>

After doing this, I had no problems compiling the program.
</div>

<h1 id="heading-link-python">Link the OpenCV Python bindings</h1>

Lastly, if you’re planning to use OpenCV-Python, you need to create a symlink between the OpenCV Python shared library and your Python virtual environment. The file you need to link to should be located in <code>/usr/local/lib/python3.7/site-packages</code> (replace <code>python3.7</code> with the version against which you built OpenCV) and will be named something like <code>cv2.cpython-37m-x86_64-linux-gnu.so</code>. If you can’t find it there, run a search with the <code>find</code> command:

<pre><code class="language-bash">$ cd /
$ sudo find . -name 'cv2*.so'</code></pre>

You’ll want to create a symlink to that file in the <code>site-packages</code> directory <em>of your virtual environment</em>. In my case, that would be <code>~/.virtualenvs/cv/lib/python3.7/site-packages</code>. Replace this path with the path corresponding to your virtual environment, and name the symlink <code>cv2.so</code>, as in the following example.

<pre><code class="language-bash">$ ln -s /usr/local/lib/python3.7/site-packages/cv2.cpython-37m-x86_64-linux-gnu.so ~/.virtualenvs/cv/lib/python3.7/site-packages/cv2.so</code></pre>

Now, test it out. Make sure you’re in your Python virtual environment, enter the Python shell, and run a couple commands:

<pre><code class="language-bash">$ workon cv
$ python
Python 3.7.1 (default, Oct 22 2018, 10:41:28)
[GCC 8.2.1 20180831] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> import cv2
>>> cv2.__version__
'4.0.0-pre'
>>></code></pre>

Congratulations! If you’ve gotten this far, everything should finally be working. Plus, if you’ve gone the route of building from source, it makes you feel like you’ve really accomplished something, which, I think, is its own reward.
